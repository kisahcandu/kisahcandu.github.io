name: Generate Jekyll Posts and Deploy

on:
  workflow_dispatch: # Mengizinkan trigger manual dari UI GitHub Actions
  schedule:
    - cron: '0 0 * * *' # Aktifkan ini untuk jadwal harian (setiap hari jam 00:00 UTC)
  # push:
  #   branches:
  #     - main # Uncomment ini jika ingin otomatis setiap push ke branch main

# Berikan izin yang diperlukan untuk GITHUB_TOKEN
permissions:
  contents: read # Hanya perlu membaca kode sumber (tidak push ke repo)
  pages: write    # Untuk mendeploy ke GitHub Pages
  id-token: write # Untuk OIDC (diperlukan oleh actions/deploy-pages)

jobs:
  generate_and_deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Lanjutkan state published_posts.json antar runs ---
      # Ini akan mencoba mengunduh published_posts.json dari run sebelumnya
      # Jika tidak ada (misal, pertama kali dijalankan), langkah ini tidak akan menyebabkan error fatal
      - name: Download previous published_posts.json state
        uses: actions/download-artifact@v4
        with:
          name: published-posts-state
          path: . # Download ke root direktori kerja
        continue-on-error: true # <--- Tambahan PENTING: Lanjutkan meskipun error

      - name: Create empty published_posts.json if not downloaded
        # Langkah ini akan memastikan file published_posts.json ada
        # Jika artifact berhasil diunduh, file sudah ada. Jika tidak, akan dibuat kosong.
        run: |
          if [ ! -f published_posts.json ]; then
            echo "published_posts.json not found from artifact, creating empty file."
            echo "{}" > published_posts.json # Pastikan isinya adalah JSON kosong yang valid
          else
            echo "published_posts.json found from artifact."
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run Python script to generate Jekyll posts
        env:
          WORDPRESS_BLOG_ID: ${{ secrets.WORDPRESS_BLOG_ID }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }} 
        run: |
          # Skrip Python Anda akan membuat _posts dan memperbarui published_posts.json
          python wordpress_importer.py 

      # --- Simpan published_posts.json untuk run berikutnya ---
      - name: Upload current published_posts.json state for next run
        uses: actions/upload-artifact@v4
        with:
          name: published-posts-state
          path: published_posts.json
          overwrite: true # Penting untuk menimpa state lama

      # --- Set up Ruby untuk Jekyll ---
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3' # Versi Ruby yang spesifik dan stabil
          bundler-cache: true 

      # --- Build Jekyll site ---
      # Jekyll akan membaca _posts yang baru saja dibuat oleh skrip Python di lingkungan ini
      - name: Build Jekyll site
        run: |
          bundle exec jekyll build

      # --- Upload _site artifact untuk GitHub Pages ---
      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: './_site' # Ini adalah folder output Jekyll

      # --- Deploy ke GitHub Pages ---
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
