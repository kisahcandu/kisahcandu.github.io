name: Deploy Jekyll Blog from WordPress API

on:
  workflow_dispatch: # Mengizinkan trigger manual dari UI GitHub Actions
  schedule:
    - cron: '0 0 * * *' # Aktifkan ini untuk jadwal harian (setiap hari jam 00:00 UTC)
  push:
    branches:
      - main # Uncomment ini jika ingin otomatis setiap push ke branch main

# Berikan izin yang diperlukan untuk GITHUB_TOKEN
permissions:
  contents: write    # Diperlukan untuk checkout dan menulis file cache/log jika diubah
  pages: write       # Untuk mendeploy ke GitHub Pages
  id-token: write    # Untuk OIDC (diperlukan oleh actions/deploy-pages)

jobs:
  build: # Ubah nama job menjadi 'build' karena sekarang juga melakukan build Jekyll
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create empty published_posts.json if it doesn't exist
        # Ini akan memastikan file published_posts.json ada saat git add (jika nanti Anda ingin meng-commit-nya)
        # Atau, jika hanya untuk cache, ini tidak perlu di-commit ke repo.
        run: |
          touch published_posts.json

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt # Pastikan requirements.txt ada di root repo

      # --- Langkah Caching untuk file state/cache ---
      # Cache untuk published_posts.json dan all_blogger_posts_cache.json
      - name: Cache WordPress State and Cache Files
        id: cache-wordpress-data
        uses: actions/cache@v4
        with:
          path: |
            published_posts.json
            all_blogger_posts_cache.json # Sesuaikan nama cache file Anda
          key: ${{ runner.os }}-wordpress-data-${{ github.sha }}
          restore-keys: |
             ${{ runner.os }}-wordpress-data-

      - name: Run Python script to generate Jekyll posts
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          WORDPRESS_BLOG_ID: ${{ secrets.WORDPRESS_BLOG_ID }}
        run: |
          # Skrip Python Anda (wordpress_importer.py) harus:
          # 1. Membuat folder `_posts` jika belum ada di root proyek.
          # 2. Mengambil data dari WordPress API.
          # 3. Menulis file-file Markdown (.md) ke dalam folder `_posts` tersebut.
          # Ingat, folder _posts ini hanya ada sementara di runner Actions!
          python wordpress_importer.py

      # --- HAPUS LANGKAH INI: Commit and push generated _posts and state file ---
      # Langkah ini yang membuat _posts terlihat di repo. Kita hapus!
      # - name: Commit and push generated _posts and state file
      #   run: |
      #     git config user.name "GitHub Actions Bot"
      #     git config user.email "actions@github.com"
      #     git add _posts/
      #     git add published_posts.json
      #     git commit -m "Generate and update Jekyll posts from WordPress" || true
      #     git push
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --- TAMBAHKAN LANGKAH-LANGKAH JEKYLL DI SINI ---
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.x' # Sesuaikan dengan versi Ruby yang Anda gunakan (misal: '3.2' atau '3.3')
          bundler-cache: true # Menginstal gem dari Gemfile.lock

      - name: Install Jekyll and dependencies
        run: bundle install

      - name: Build Jekyll site
        run: |
          # Pastikan _config.yml Anda memiliki `destination: dist`
          # Jika tidak, Jekyll akan membangun ke `_site` secara default.
          bundle exec jekyll build --destination ./dist # Jekyll akan membaca _posts yang dibuat Python

      # --- Langkah-langkah Deploy (Sama seperti sebelumnya) ---
      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist' # Mengunggah folder 'dist' yang dihasilkan Jekyll

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
